Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ touch "Git Commands.txt" // crear archivo con espacios 

git status // Para trackear que pasa con los documentos

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git status
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        learn.txt

nothing added to commit but untracked files present (use "git add" to track)

$  git add  . // agregar cualquier archivo o en lugar de " . " poner el nombre del archivo

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$  git add learn.txt

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   learn.txt

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git commit -m "learn file added"
[main (root-commit) fff4168] learn file added
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 learn.txt

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git status
On branch main
nothing to commit, working tree clean


Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git log // funciona para poder listar los cambios que han sucedido en la rama
commit a25c5a14ec2d55184e938dfd4dc3ef08dad27b94 (HEAD -> main)
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 09:50:53 2024 -0600

    extra file added

commit fff41686af3e26488568484a5e43c4cd15aae83b
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 09:47:10 2024 -0600

    learn file added

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git mv learn.txt notes.txt // Cambiar el nombre de un archivo 


Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git branch -M name //  Esto es para cambiar el nombre de la rama 

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git branch firstexample // Crea una rama en el git pero no te manda a la rama seguimos en main

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git chekout firstexample // Error de capa 8 ya que escribi mal checkout
git: 'chekout' is not a git command. See 'git --help'.

The most similar command is
        checkout

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git checkout firstexample
Switched to branch 'firstexample'// Aquí marca que se cambio la rama 

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (firstexample) // Ahora en los paréntesis se ve que cambiamos la rama
$

------------
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (firstexample)
$ git add .

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (firstexample)
$ git commit -m "changes in notes.txt and added firstbranch.txt"
[firstexample 8e41ef3] changes in notes.txt and added firstbranch.txt
 2 files changed, 31 insertions(+), 2 deletions(-)
 create mode 100644 firstbranch.txt

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (firstexample)
$ git status
On branch firstexample
nothing to commit, working tree clean

------

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (firstexample)
$ git branch -m "Luis-changes" // Con esto se cambia el nombre de la rama actual

-----
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes)
$ vi name.txt //visualizar un archivo

----

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes)
$ vi name.txt //editar un archivo 
-----
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes)
$ cat name.txt //visualizar un archivo cat
The cat command in Linux is used to concatenate and display files. It can be used for the following purposes:

Displaying the contents of a file: When you run cat filename, the contents of the specified file will be displayed in the terminal.
Combining multiple files: You can use cat file1.txt file2.txt file3.txt to display the contents of multiple files one after the other.
Creating simple text files: If you run cat &gt; filename.txt, you can start typing text and press Ctrl+D to save the content to the file.
Appending data to files: The cat command can be used to append data to the end of a file using the &gt;&gt; operator, e.g., cat &gt;&gt; filename.txt.
Generating temporary data: You can use cat &lt;&lt;EOF to type in multi-line text and press Ctrl+D to end the input, which can then be used as input for other commands.

Mas información para cat 

----

// Para eliminar una branch necesitamos estar en otra branch ejemplo de eliminar Luis-changes

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes)
$ git checkout main
Switched to branch 'main'

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git checkout -d Luis-changes

-----
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes)
$ git branch // Te da la lista de las ramas creadas y te marca donde esta la cabeza (head)
* Luis-changes
  main

-------------------------
// Para hacer un merge tenemos que ir a la rama a la que queremos añadir los cambios y hacer el siguiente comando
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (Luis-changes) 
$ git checkout main // Cambiamos a la rama a la que le agregaremos los cambios
Switched to branch 'main'

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git branch
  Luis-changes
* main // confirmamos que estamos aquí

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git merge Luis-changes // git merge namebranch ahora con esto añadimos los cambios de la rama Luis-changes
Updating da817b4..10da97e
Fast-forward
 firstbranch.txt |  0
 notes.txt       | 85 +++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 83 insertions(+), 2 deletions(-) // informacion acerca de los cambios añadidos 
 create mode 100644 firstbranch.txt

------------------
// reset en git en este caso tenemos que regresar a un commit anterior por que hicimos uno nuevo por accidente o nos hizo falta escribir mas codigo y se envió a medias

// Se crea una nueva rama en la cual se agrega un archivo y se agrega datos 2 veces en el archivo 
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new)
$ git log // tenemos que ver los ID de los commit para poder resetear  
commit bb36a374f8a32b292e881a80c5fafb050e83eb84 (HEAD -> new)
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 14:27:43 2024 -0600

    2nd data in new file

commit 4a00211ef6d5360b2e00bddd8e6f3d19a2b63842 // tenemos que copiar el ID del commit al que queremos regresar
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 14:25:54 2024 -0600

    data in new file

commit fa1f86b2388e8c26ed32779c4cb9c1e35e4ae8de
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 14:23:18 2024 -0600

    new file added

commit 10da97e415aced851845a9037511ec3f9bb98cec (main, Luis-changes)
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 13:50:50 2024 -0600

    Add more information on notes

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new)
$ git reset 4a00211ef6d5360b2e00bddd8e6f3d19a2b63842 // regresemos al antiguo commit
Unstaged changes after reset:
M       new.txt

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new)
$ git status  
On branch new
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   new.txt // Regresamos al anterior commit pero conservamos la informacion que tenia el 2nd commit

no changes added to commit (use "git add" and/or "git commit -a")
 
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new) // como podemos ver acaba de desaparecer el commit de 2nd data in new file peor seguimos conservando su informacion
$ git log
commit 4a00211ef6d5360b2e00bddd8e6f3d19a2b63842 (HEAD -> new)
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 14:25:54 2024 -0600

    data in new file

commit fa1f86b2388e8c26ed32779c4cb9c1e35e4ae8de
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 14:23:18 2024 -0600

    new file added

commit 10da97e415aced851845a9037511ec3f9bb98cec (main, Luis-changes)
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 13:50:50 2024 -0600

    Add more information on notes


// Si lo que queremos es eliminar el commit completamente y no conservar la informacion que tenia entonces tenemos que usar el siguiente comando

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new)
$ git reset 10da97e415aced851845a9037511ec3f9bb98cec  --hard // git reset <commitID> (--hard usalo adecuadamente)
HEAD is now at 10da97e Add more information on notes // Se elimina toda la informacion que se tenia despues del commit que agregamos 

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (new)
$ git log
commit 10da97e415aced851845a9037511ec3f9bb98cec (HEAD -> new, main, Luis-changes) // en mi caso borre todo lo que hizo new branch 
Author: Luisito2178Git <luis.apd2178@gmail.com>
Date:   Wed Aug 21 13:50:50 2024 -0600

    Add more information on notes
// git reset and git restore pueden hacer lo mismo

-------------------
// la forma de usar git ignore
Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main) // creamos una nueva rama
$ git branch ignore

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (main)
$ git checkout ignore // La rama para este ejemplo se llama ignore
Switched to branch 'ignore'

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (ignore)
$ touch a b // creamos 2 archivos que vamos a ignorar

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (ignore)
$ mkdir keyExample // Tambien creamos una carpeta para ignorar

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (ignore)
$ cd keyExample/ // entramos a otra carpeta

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit/keyExample (ignore)
$ touch key1 // Creamos un nuevo archivo dentro de la capeta

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit/keyExample (ignore)
$ cd .. // Salimos de la carpeta

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (ignore)
$ touch .gitignore // Creamos el archivo gitignore

// Dentro del archivo .gitignore agregamos los archivos que se van ignorar al momento de hacer un commit
keyExample/
a

Luigi@Luisito2178 MINGW64 ~/Desktop/LearnGit (ignore)
$ git status
On branch ignore
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore // Podemos ver que solo aparece .gitignore y b ya que en el documento solo puse la nueva carpeta y el archivo a 
        b



EXTRA NOTE:
git mv OLD-FILENAME NEW-FILENAME to change a file name
git switch -c nameBranch // Creamos una nueva rama y cambiamos el head hacia ella sin necesidad de hacer un checkout despues 
 


